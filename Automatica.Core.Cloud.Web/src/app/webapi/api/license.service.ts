/**
 * Automatica.Core.Cloud
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { GenerateLicenseData } from '../model/generateLicenseData';
import { License } from '../model/license';
import { PluginFeature } from '../model/pluginFeature';
import { PublicPrivateKey } from '../model/publicPrivateKey';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LicenseService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param objId 
     * @param version 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(objId: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(objId: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(objId: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(objId: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (objId === null || objId === undefined) {
            throw new Error('Required parameter objId was null or undefined when calling _delete.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling _delete.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v${encodeURIComponent(String(version))}/license/${encodeURIComponent(String(objId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param version 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDemoLicense(version: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createDemoLicense(version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createDemoLicense(version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createDemoLicense(version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling createDemoLicense.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v${encodeURIComponent(String(version))}/license/demo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param version 
     * @param apiKey 
     * @param generateLicenseData 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateLicense(version: string, apiKey: string, generateLicenseData?: GenerateLicenseData, observe?: 'body', reportProgress?: boolean): Observable<License>;
    public generateLicense(version: string, apiKey: string, generateLicenseData?: GenerateLicenseData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<License>>;
    public generateLicense(version: string, apiKey: string, generateLicenseData?: GenerateLicenseData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<License>>;
    public generateLicense(version: string, apiKey: string, generateLicenseData?: GenerateLicenseData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling generateLicense.');
        }

        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling generateLicense.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<License>(`${this.basePath}/v${encodeURIComponent(String(version))}/license/license/${encodeURIComponent(String(apiKey))}`,
            generateLicenseData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param coreServerVersion 
     * @param version 
     * @param apiKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generatePublicPrivateKey(coreServerVersion: string, version: string, apiKey: string, observe?: 'body', reportProgress?: boolean): Observable<PublicPrivateKey>;
    public generatePublicPrivateKey(coreServerVersion: string, version: string, apiKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PublicPrivateKey>>;
    public generatePublicPrivateKey(coreServerVersion: string, version: string, apiKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PublicPrivateKey>>;
    public generatePublicPrivateKey(coreServerVersion: string, version: string, apiKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (coreServerVersion === null || coreServerVersion === undefined) {
            throw new Error('Required parameter coreServerVersion was null or undefined when calling generatePublicPrivateKey.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling generatePublicPrivateKey.');
        }

        if (apiKey === null || apiKey === undefined) {
            throw new Error('Required parameter apiKey was null or undefined when calling generatePublicPrivateKey.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<PublicPrivateKey>(`${this.basePath}/v${encodeURIComponent(String(version))}/license/key/${encodeURIComponent(String(coreServerVersion))}/${encodeURIComponent(String(apiKey))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param version 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPluginFeatures(version: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PluginFeature>>;
    public getAllPluginFeatures(version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PluginFeature>>>;
    public getAllPluginFeatures(version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PluginFeature>>>;
    public getAllPluginFeatures(version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getAllPluginFeatures.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PluginFeature>>(`${this.basePath}/v${encodeURIComponent(String(version))}/license/features`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param version 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLicenses(version: string, observe?: 'body', reportProgress?: boolean): Observable<Array<License>>;
    public getLicenses(version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<License>>>;
    public getLicenses(version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<License>>>;
    public getLicenses(version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getLicenses.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<License>>(`${this.basePath}/v${encodeURIComponent(String(version))}/license`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
